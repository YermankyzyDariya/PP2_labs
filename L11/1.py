import psycopg2

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = psycopg2.connect(
    dbname='phonebook11',
    user='postgres',
    password='12345678',
    host='localhost',
)
cur = conn.cursor()

# 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
cur.execute("""
CREATE TABLE IF NOT EXISTS phonebook (
    id SERIAL PRIMARY KEY,
    name TEXT,
    phone TEXT
);
""")

# 2. –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ —à–∞–±–ª–æ–Ω—É
cur.execute("""
DROP FUNCTION IF EXISTS search_phonebook(TEXT);
CREATE OR REPLACE FUNCTION search_phonebook(pattern TEXT)
RETURNS TABLE(id INT, name TEXT, phone TEXT) AS $$
BEGIN
    RETURN QUERY
    SELECT pb.id, pb.name::TEXT, pb.phone::TEXT
    FROM phonebook pb
    WHERE pb.name ILIKE '%' || pattern || '%'
       OR pb.phone ILIKE '%' || pattern || '%';
END;
$$ LANGUAGE plpgsql;
""")

# 3. –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤—Å—Ç–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
cur.execute("""
DROP PROCEDURE IF EXISTS upsert_user(TEXT, TEXT);
CREATE OR REPLACE PROCEDURE upsert_user(p_name TEXT, p_phone TEXT)
LANGUAGE plpgsql AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM phonebook WHERE name = p_name) THEN
        UPDATE phonebook SET phone = p_phone WHERE name = p_name;
    ELSE
        INSERT INTO phonebook(name, phone) VALUES (p_name, p_phone);
    END IF;
END;
$$;
""")

# 4. –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏
cur.execute("""
DROP PROCEDURE IF EXISTS insert_many_users(TEXT[], TEXT[]);
CREATE OR REPLACE PROCEDURE insert_many_users(names TEXT[], phones TEXT[])
LANGUAGE plpgsql AS $$
DECLARE
    i INT;
BEGIN
    FOR i IN 1..array_length(names, 1) LOOP
        IF phones[i] ~ '^\+?[0-9]{10,15}$' THEN
            CALL upsert_user(names[i], phones[i]);
        ELSE
            RAISE NOTICE 'Incorrect phone: %, name: %', phones[i], names[i];
        END IF;
    END LOOP;
END;
$$;
""")

# 5. –§—É–Ω–∫—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
cur.execute("""
DROP FUNCTION IF EXISTS get_phonebook_paginated(INT, INT);
CREATE OR REPLACE FUNCTION get_phonebook_paginated(limit_count INT, offset_count INT)
RETURNS TABLE(id INT, name TEXT, phone TEXT) AS $$
BEGIN
    RETURN QUERY
    SELECT pb.id, pb.name::TEXT, pb.phone::TEXT
    FROM phonebook pb
    LIMIT limit_count OFFSET offset_count;
END;
$$ LANGUAGE plpgsql;
""")

# 6. –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∏—è
cur.execute("""
DROP PROCEDURE IF EXISTS delete_user(TEXT);
CREATE OR REPLACE PROCEDURE delete_user(identifier TEXT)
LANGUAGE plpgsql AS $$
BEGIN
    DELETE FROM phonebook 
    WHERE name = identifier OR phone = identifier;
END;
$$;
""")

conn.commit()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤

def search_by_pattern(pattern):
    cur.execute("SELECT * FROM search_phonebook(%s);", (pattern,))
    for row in cur.fetchall():
        print("üîé Found:", row)

def upsert(name, phone):
    cur.execute("CALL upsert_user(%s, %s);", (name, phone))
    conn.commit()

def insert_batch(names, phones):
    cur.execute("CALL insert_many_users(%s, %s);", (names, phones))
    conn.commit()

def paginate(limit, offset):
    cur.execute("SELECT * FROM get_phonebook_paginated(%s, %s);", (limit, offset))
    for row in cur.fetchall():
        print("üìÑ Row:", row)

def delete(identifier):
    cur.execute("CALL delete_user(%s);", (identifier,))
    conn.commit()

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
while True:
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –ü–æ–∏—Å–∫ –ø–æ —à–∞–±–ª–æ–Ω—É")
    print("2. –í—Å—Ç–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("3. –í—Å—Ç–∞–≤–∏—Ç—å –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("4. –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    print("5. –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("6. –í—ã–π—Ç–∏")
    
    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ")

    if choice == "1":
        pattern = input("–í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞: ")
        search_by_pattern(pattern)

    elif choice == "2":
        name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
        phone = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω: ")
        upsert(name, phone)

    elif choice == "3":
        names_input = input("–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ")
        phones_input = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ")
        names = names_input.split(",")
        phones = phones_input.split(",")
        insert_batch(names, phones)

    elif choice == "4":
        limit = int(input("–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç: "))
        offset = int(input("–í–≤–µ–¥–∏—Ç–µ —Å–º–µ—â–µ–Ω–∏–µ: "))
        paginate(limit, offset)

    elif choice == "5":
        identifier = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
        delete(identifier)

    elif choice == "6":
        print("–í—ã—Ö–æ–¥...")
        break

    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
cur.close()
conn.close()


